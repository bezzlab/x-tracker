
//
//    xTrackerGui
//
//    Package: xtrackergui.gui
//    File: GuiUtils.java
//    Date: 01/08/2010
//    Author: Andrew Bullimore
//

package xtrackergui.utils.guiutils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
// Use interface from xTracker project - are loading plugins to find their type
// ie xtracker.pluginInterfaces
import org.apache.log4j.Logger;
import xtracker.pluginInterface;
// Copied from xtracker project as constructor is not public
import xtrackergui.misc.PluginClassLoader;
import xtrackergui.model.XTrackerPluginInformation;
import xtrackergui.utils.fileutils.FileUtils;

/**
 * Utility class providing support methods (static) for XTrackerGuiUIFrame
 *
 * @author andrew bullimore
 */
public class GuiUtils {

    public static enum OperatingSystemType {MACOSX, NIX, WINDOWS, NOTRECOGNISED};
    private static Logger logger = Logger.getLogger(GuiUtils.class.getName());
    private static OperatingSystemType operatingSystemType = OperatingSystemType.NOTRECOGNISED;

    /**
     * Private Default Constructor - utility class with static methods,
     * there is no requirement to create an instance of this class
     *
     */
    private GuiUtils() {
    }

    // Class initialiser - setup the operating system type - not very sophisticated but shows willing
    static {

        if(System.getProperty("mrj.version") != null) {

            operatingSystemType = OperatingSystemType.MACOSX;
            
        } else {

            String os = System.getProperty("os.name").toLowerCase();
            if(os.startsWith("windows")) {

                operatingSystemType = OperatingSystemType.WINDOWS;

            } else if(File.separatorChar == '/') {

                // is flavour of UNIX or LINUX but NOT mac osx thats sorted by
                // seeing if mrj.version is null as per above
                operatingSystemType = OperatingSystemType.NIX;
            } else {

                logger.error("Cannot determine the os type");
            }
        }
    }

    @Override
    public String toString() {

        return "GuiUtils class";
    }

    /**
     * The enumerated description (OperatingSystemType) of
     * the operating system on the executing machine
     *
     * @return The OperatingSystemType
     */
    public static OperatingSystemType getOperatingSystemType() {

        return operatingSystemType;
    }

    /**
     * Return the location of the Java Runtime Enviroment as a java.io.file
     *
     * @param osType The OperatingSystemType
     * @return The jre location
     */
    public static File getJavaRuntime(OperatingSystemType osType) throws IllegalStateException, FileNotFoundException {

        String javaRuntimeDirectory = System.getProperty("java.home");
        File jre = null;

        if(javaRuntimeDirectory != null) {

            if(osType == OperatingSystemType.WINDOWS) {

                jre = new File(javaRuntimeDirectory, "bin/java.exe");

            } else {

                jre = new File(javaRuntimeDirectory, "bin/java");
            }

            if (!jre.isFile()) {

                throw new FileNotFoundException(jre.toString());
            }
        } else {

            throw new IllegalStateException("java.home");
        }

        return jre;
    }

    /**
     * Run the process specified in the List of commands in parameter cmdArray -
     * on windows its jre path\java.exe -jar xTracker <config file>
     * on *nix's jre path/java -jar xTracker <config file>
     *
     * @param cmdarray List of commands passed to processBuilder 1. jre 2. -jar 3. xTracker <config file>
     */
    public static int runProcess(List<String> cmdArray) throws IOException, InterruptedException {

        int processReturnValue = -99;
        BufferedReader bufferedReader = null;

        ProcessBuilder processBuilder = new ProcessBuilder(cmdArray);
        // Make sure error output generated by the process - xTracker - is caught and
        // output with any standard output
        processBuilder.redirectErrorStream(true);
        Process process = processBuilder.start();
        InputStream inputStream = process.getInputStream();

        try {
            // Collect the output and send to the GUI screen text display area - don't like this
            // too much - might need to be in its own thread maybe as output pops up after
            // xTracker has finished - but log area is in its own runnable? Removing
            // process.waitfor() below makes no odds???
            bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
            String line;
            while((line = bufferedReader.readLine()) != null) {

                logger.info(line);
            }
        
            // process.waitfor() throws InterruptedException
            processReturnValue = process.waitFor();
        
        } catch (IOException ex) {

            throw ex;

        } catch(InterruptedException ex) {

            throw ex;

        } finally {

            if (bufferedReader == null) {
            
                bufferedReader.close();
            }

            return processReturnValue;
        }
    }

    /**
     * Return all available information retrievable from the X-Tracker plugin
     *
     * @param pluginPath The directory path to the plugin directory
     * @param fileNameToCheck The name of the jar file containing the plugin information required
     * @param classToCheck The class name to load to recover the plugin information
     * @return Plugin information as XTrackerPluginInformation objects
     */
    private static XTrackerPluginInformation getXTrackerPluginInformation(String pluginPath, String fileNameToCheck, String classToCheck) {

        // Get file name including any extension - we want the .jar files
        // which should be the only file type in the plugins folder
        String fileName = fileNameToCheck;

        // The classname should be like the filename without the .jar extension
        String className = classToCheck;

        // The type of the plugin - initialise to PLUGINTYPENOTDEFINED for safety
        PluginType pluginType = PluginType.PLUGINTYPENOTDEFINED;
        XTrackerPluginInformation xTrackerPluginInformation = null;

        PluginClassLoader pluginLoader = null;
        pluginInterface plugin = null;

        // Create the plugin loader for this jar file
        try {

            pluginLoader = new PluginClassLoader(pluginPath + fileName);
            
        } catch (Exception e) {

            if(logger.isDebugEnabled()) {
                
                logger.debug("GuiUtils::getPluginType: PluginLoader - Problem loading plugin " + fileName);
            }
        }

        // Load the class for this jar file
        try {

            Class pluginClass = pluginLoader.findClass("xtracker." + className);
            if(pluginClass != null) {

              plugin = (pluginInterface) pluginClass.newInstance();

            } else {

                plugin = null;
            }
            
       } catch(InstantiationException e) {

            logger.warn("Plugin " + className + " could not be loaded");
            plugin = null;

       } catch(IllegalAccessException e) {

           logger.warn("Plugin " + className + " could not be loaded");
           plugin = null;

       } catch(NoClassDefFoundError e) {

           logger.warn("Plugin " + className + " could not be loaded");

           plugin = null;
       }

        // If we have a plugin, get its type i.e. QUANTIFICATIONPLUGIN etc
        if (plugin != null) {

            try {

                logger.info("Plugin " + className + " loaded");
                pluginType = PluginType.getPluginEnumByTypeString(plugin.getType());

                xTrackerPluginInformation = new XTrackerPluginInformation(fileName,
                                                                          className,
                                                                          plugin.getName(),
                                                                          plugin.getVersion(),
                                                                          plugin.getDescription(),
                                                                          pluginType);

            } catch(IllegalArgumentException e) {

                if(logger.isDebugEnabled()) {

                    logger.debug("GuiUtils::getPluginType: PluginType - Problem getting plugin type " + fileName);
                }
            }
        } else {

            xTrackerPluginInformation = new XTrackerPluginInformation(fileName,
                                                                      className,
                                                                      "",
                                                                      "",
                                                                      "",
                                                                      pluginType);
        }

        return xTrackerPluginInformation;
    }

    /**
     * Return a Map of all the available X-Tracker plugins keyed on the plugin type
     *
     * @throws FileNotFoundException if the plugin directory is not found
     * @param pluginPath
     * @return Map of XTrackerPluginInformation (Map<PluginType, List<XTrackerPluginInformation>>)
     */
    public static Map<PluginType, List<XTrackerPluginInformation>> getCompletePluginList(String pluginPath) throws FileNotFoundException {

        // Complete map of all plugins keyed by PluginType
        Map<PluginType, List<XTrackerPluginInformation>> completePluginList = new HashMap<PluginType, List<XTrackerPluginInformation>>();

        String pluginFileName = "";
        String pluginClassName = "";
        // Get the list of plugin jar files from the plugins folder - NB throws FileUtils.getDirectoryListing
        // if directory given in variable pluginPath is not found
        File pluginFilesList[] = FileUtils.getDirectoryListing(pluginPath);

        for (File pluginFile : pluginFilesList) {

            // Get file name including any extension - we want the .jar files
            // which should be the only file type in the plugins folder
            pluginFileName = pluginFile.getName();

            // A counter to check if it is a jar or not - same way
            // its done in xTracker
            int index=-1;
            if ((index = pluginFileName.indexOf(".jar")) >= 0) {

                pluginClassName = pluginFileName.substring(0, index);

                // Get the plugin information - name, version, description, type
                XTrackerPluginInformation xTrackerPluginInformation = getXTrackerPluginInformation(pluginPath, pluginFileName, pluginClassName);

                if (xTrackerPluginInformation.getType() != PluginType.PLUGINTYPENOTDEFINED) {

                    if (completePluginList.containsKey(xTrackerPluginInformation.getType())) {

                        (completePluginList.get(xTrackerPluginInformation.getType())).add(xTrackerPluginInformation);
                    } else {

                        List<XTrackerPluginInformation> pluginListForXTrackerPluginInformation = new ArrayList<XTrackerPluginInformation>();
                        pluginListForXTrackerPluginInformation.add(xTrackerPluginInformation);
                        completePluginList.put(xTrackerPluginInformation.getType(), pluginListForXTrackerPluginInformation);
                    }
                } else {

                    if(logger.isDebugEnabled()) {

                        logger.debug("GuiUtils::getCompletePluginList: Problem - " +
                                      pluginFileName +
                                      " has " +
                                      xTrackerPluginInformation.getType().getPluginString());
                    }
                }
            }
        }
        
        return completePluginList;
    }   
}
